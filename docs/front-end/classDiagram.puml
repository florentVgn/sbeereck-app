@startuml
skinparam monochrome true
skinparam classAttributeIconSize 0
skinparam nodesep 110
skinparam ranksep 10

package Model {
	class Party {
		- id: int
		- name: String
		- date: Date
		- numberOfAttendees: int
		- balance: float
		+ Party(id, name, date, numberOfAttendees, balance)
		+ Party(name, date, normalBeerPrice, specialBeerPrice, servedBeers)
	}

	class Product {
		- id: int
		- name: String
		- price: float
		+ Product(id, name, price, type)
	}

	enum ProductType {
		BEER,
		DEPOSIT,
		FOOD
	}

	ProductType "- type" <- Product

	enum BeerCategory {
		NORMAL,
		SPECIAL
	}

	Product "- servedBeers: Map<Product, BeerCategory>" <--o Party

	BeerCategory <. Party: Uses
	
	class Member {
		- id: int
		- firstName: String
		- lastName: String
		- balance: float
		- lastMembershipPayment: Date
		+ Member(id, firstName, lastName, balance, lastMembershipPayment)
		+ isMembershipValid(): Boolean
	}
}

package Controller {
	interface RESTDataManager {
		+ getObject(ressource: String): Map<String, Object>
		+ getArray(ressource: String): List<Object>
		+ post(resource: String, jsonObject: Map<String, Object>)
		+ put(resource: String, jsonObject: Map<String, Object)
		+ delete(resource: String): Map<String, Object>
	}

	class RESTfulDataManager {
		- host: String
		- port: String
		- authToken: String
		+ RESTfulDataManager(host, port, authToken)
	}

	RESTDataManager <|.. RESTfulDataManager
		

	class PartyController {
		+ PartyController(dataManager: RESTDataManager)
		+ getAllParties(): List<Party>
		+ addParty(party: Party): int
		+ editParty(party: Party)
		+ getParty(id: int): Party
		+ getDefaultNormalBeerPrice(): float
		+ setDefaultNormalBeerPrice(newPrice: float)
		+ getDefaultSpecialBeerPrice(): float
		+ setDefaultSpecialBeerPrice(newPrice: float)
	}

	RESTDataManager "- dataManager" <- PartyController

	class ProductController {
		+ ProductController(dataManager: RESTDataManager)
		+ getAllProducts(): List<Product>
		+ getProductsByType(type: string): List<Product>
		+ deleteProduct(id: int)
		+ addProduct(product: Product): int
		+ editProduct(product: Product)
	}

	RESTDataManager "- dataManager" <-- ProductController

	class MemberController {
		+ MemberController(dataManager: RESTDataManager)
		+ getAllMembers(): List<Member>
		+ getBalanceTooLowThreshold(): float
		+ setBalanceTooLowThreshold(newThreshold: float)
	}
	
	RESTDataManager "- dataManager" <-- MemberController
}

PartyController ..> Party: Uses
ProductController ..> Product: Uses
MemberController ..> Member: Uses

@enduml
