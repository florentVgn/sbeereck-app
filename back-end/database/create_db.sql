-- MySQL Script generated by MySQL Workbench
-- Sat Dec 30 22:32:01 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema sbeereck-db
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `sbeereck-db` ;

-- -----------------------------------------------------
-- Schema sbeereck-db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sbeereck-db` DEFAULT CHARACTER SET utf8 ;
USE `sbeereck-db` ;

-- -----------------------------------------------------
-- Table `members`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `members` ;

CREATE TABLE IF NOT EXISTS `members` (
  `member_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(255) NOT NULL,
  `last_name` VARCHAR(255) NOT NULL,
  `school` VARCHAR(32) NULL,
  `email` VARCHAR(255) NULL,
  `phone` VARCHAR(12) NULL,
  `balance` FLOAT(10,2) NOT NULL DEFAULT 0,
  `last_membership_payment` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `is_deleted` BIT(1) NOT NULL DEFAULT 0,
  `is_former_staff` BIT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`member_id`))
ENGINE = InnoDB;

CREATE INDEX `is_deleted_idx` ON `members` (`is_deleted` ASC);


-- -----------------------------------------------------
-- Table `parties`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `parties` ;

CREATE TABLE IF NOT EXISTS `parties` (
  `party_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `date` DATE NULL,
  `normal_beer_price` FLOAT(6,2) NOT NULL,
  `special_beer_price` FLOAT(6,2) NOT NULL,
  `is_deleted` BIT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`party_id`))
ENGINE = InnoDB;

CREATE INDEX `is_deleted_idx` ON `parties` (`is_deleted` ASC);


-- -----------------------------------------------------
-- Table `transactions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `transactions` ;

CREATE TABLE IF NOT EXISTS `transactions` (
  `transaction_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_id` BIGINT UNSIGNED NOT NULL,
  `party_id` BIGINT UNSIGNED NULL,
  `amount` FLOAT(8,2) NOT NULL,
  `label` VARCHAR(255) NULL,
  `timestamp` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`transaction_id`),
  CONSTRAINT `party_id_fk`
    FOREIGN KEY (`party_id`)
    REFERENCES `parties` (`party_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `member_id_fk`
    FOREIGN KEY (`member_id`)
    REFERENCES `members` (`member_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `member_id_idx` ON `transactions` (`member_id` ASC);

CREATE INDEX `party_id_idx` ON `transactions` (`party_id` ASC);


-- -----------------------------------------------------
-- Table `products`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `products` ;

CREATE TABLE IF NOT EXISTS `products` (
  `product_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `price` FLOAT(6,2) NOT NULL,
  `type` VARCHAR(12) NOT NULL,
  PRIMARY KEY (`product_id`))
ENGINE = InnoDB;

CREATE INDEX `type_idx` ON `products` (`type` ASC);


-- -----------------------------------------------------
-- Table `served_beers_at_party`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `served_beers_at_party` ;

CREATE TABLE IF NOT EXISTS `served_beers_at_party` (
  `party_id` BIGINT UNSIGNED NOT NULL,
  `product_id` BIGINT UNSIGNED NOT NULL,
  `category` VARCHAR(8) NOT NULL,
  PRIMARY KEY (`party_id`, `product_id`),
  CONSTRAINT `served_beers_party_id_fk`
    FOREIGN KEY (`party_id`)
    REFERENCES `parties` (`party_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `served_beers_product_id_fk`
    FOREIGN KEY (`product_id`)
    REFERENCES `products` (`product_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `product_id_fk_idx` ON `served_beers_at_party` (`product_id` ASC);


-- -----------------------------------------------------
-- Table `parameters`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `parameters` ;

CREATE TABLE IF NOT EXISTS `parameters` (
  `parameters_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `balance_too_low_threshold` FLOAT(6,2) NOT NULL,
  `membership_cost` FLOAT(6,2) NOT NULL,
  `membership_expiring_date` DATE NOT NULL,
  `default_normal_beer_price` FLOAT(6,2) NOT NULL,
  `default_special_beer_price` FLOAT(6,2) NOT NULL,
  PRIMARY KEY (`parameters_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `authentication_tokens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `authentication_tokens` ;

CREATE TABLE IF NOT EXISTS `authentication_tokens` (
  `token_id` BIGINT UNSIGNED NOT NULL,
  `hashed_token` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`token_id`))
ENGINE = InnoDB;

USE `sbeereck-db` ;

-- -----------------------------------------------------
-- Placeholder table for view `member_list`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `member_list` (`member_id` INT, `first_name` INT, `last_name` INT, `balance` INT, `last_membership_payment` INT);

-- -----------------------------------------------------
-- Placeholder table for view `party_list`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `party_list` (`party_id` INT, `name` INT, `date` INT, `number_of_attendees` INT, `balance` INT);

-- -----------------------------------------------------
-- View `member_list`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `member_list` ;
DROP TABLE IF EXISTS `member_list`;
USE `sbeereck-db`;
CREATE  OR REPLACE VIEW `member_list` AS
SELECT member_id, first_name, last_name, balance, last_membership_payment
	FROM members
    WHERE is_deleted = 0
    ORDER BY last_name ASC, first_name ASC;

-- -----------------------------------------------------
-- View `party_list`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `party_list` ;
DROP TABLE IF EXISTS `party_list`;
USE `sbeereck-db`;
CREATE  OR REPLACE VIEW `party_list` AS
    SELECT 
        p.party_id, name, date, number_of_attendees, balance
    FROM
        parties AS p,
        (SELECT 
            party_id,
                COUNT(DISTINCT member_id) number_of_attendees,
                SUM(amount) balance
        FROM
            transactions
        GROUP BY party_id) AS d
    WHERE
        p.party_id = d.party_id
            AND p.is_deleted = 0
    ORDER BY date DESC;
USE `sbeereck-db`;

DELIMITER $$

USE `sbeereck-db`$$
DROP TRIGGER IF EXISTS `transactions_AFTER_INSERT` $$
USE `sbeereck-db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sbeereck-db`.`transactions_AFTER_INSERT` AFTER INSERT ON `transactions` FOR EACH ROW
BEGIN
	UPDATE members
		SET members.balance = members.balance + NEW.amount
        WHERE members.member_id = NEW.member_id;
END$$


USE `sbeereck-db`$$
DROP TRIGGER IF EXISTS `transactions_AFTER_UPDATE` $$
USE `sbeereck-db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sbeereck-db`.`transactions_AFTER_UPDATE` AFTER UPDATE ON `transactions` FOR EACH ROW
BEGIN
	IF OLD.member_id = NEW.member_id THEN
		UPDATE members
			SET members.balance = members.balance + NEW.amount - OLD.amount
			WHERE members.member_id = NEW.member_id;
	ELSE
		UPDATE members
			SET members.balance = members.balance - OLD.amount
			WHERE members.member_id = OLD.member_id;
		UPDATE members
			SET members.balance = members.balance + NEW.amount
			WHERE members.member_id = NEW.member_id;
	END IF;
		
END$$


USE `sbeereck-db`$$
DROP TRIGGER IF EXISTS `transactions_AFTER_DELETE` $$
USE `sbeereck-db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sbeereck-db`.`transactions_AFTER_DELETE` AFTER DELETE ON `transactions` FOR EACH ROW
BEGIN
	UPDATE members
		SET members.balance = members.balance - OLD.amount
        WHERE members.member_id = OLD.member_id;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- Default param values
